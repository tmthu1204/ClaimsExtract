import pandas as pd
import os
from models.sentiment import SentimentModel
from utils.preprocessing import split_sentences, rule_based_filter
from models.decontextualization import Decontextualizer

# Load sentiment model
sentiment_model = SentimentModel()

decontext_model = Decontextualizer()


# ƒê·ªçc d·ªØ li·ªáu
input_csv = r"D:\StudySpace\TaÃÄi li√™Ã£u\UIT Data Challenge\Claim Extraction\data\test_claims.csv"
df = pd.read_csv(input_csv)
print(f"Processing {len(df)} articles...")

claims = []

# T·∫°o folder 'data' n·∫øu ch∆∞a c√≥
os.makedirs("data", exist_ok=True)

for idx, row in df.iterrows():
    article_id = row["ID"]
    
    # Ki·ªÉm tra title NaN
    title = row.get("Ti√™u ƒë·ªÅ")
    if pd.isna(title):
        title = ""
    else:
        title = str(title)
    
    content = str(row.get("N·ªôi dung", ""))
    
    # N·∫øu title r·ªóng th√¨ ch·ªâ d√πng content
    text = title + " " + content if title else content

    print(f"\nüì∞ Processing article {idx+1}/{len(df)} | ID: {article_id} | Title: {title}")

    sentences = split_sentences(text)

    for s in sentences:
        s = s.strip()  # ƒë·∫£m b·∫£o kh√¥ng c√≤n d·∫•u tr·∫Øng ƒë·∫ßu/ƒëu√¥i

        # Rule-based filter
        if not rule_based_filter(s):
            print(f"[Filtered by rule] {s}")
            continue

        # Sentiment filter: lo·∫°i c√¢u POS/NEG c·∫£m x√∫c
        sentiment = sentiment_model.predict(s)
        if sentiment in ["POS", "NEG"]:
            print(f"[Filtered by sentiment {sentiment}] {s}")
            continue

        # N·∫øu qua t·∫•t c·∫£ filter -> gi·ªØ l·∫°i
        print(f"[Kept] {s}")

        # T·∫°o phi√™n b·∫£n c√≥ ng·ªØ c·∫£nh n·∫øu c·∫ßn
        # B·∫°n c√≥ th·ªÉ ki·ªÉm tra n·∫øu claim m∆° h·ªì (v√≠ d·ª• length < 15 t·ª´) ho·∫∑c lu√¥n contextualize
        contextual_claim = decontext_model.contextualize(s, content)

        claims.append({
            "ID": article_id,
            "claim": s,
            "contextual_claim": contextual_claim
        })



out_df = pd.DataFrame(claims)
out_csv = r"D:\StudySpace\TaÃÄi li√™Ã£u\UIT Data Challenge\Claim Extraction\data\claims_output_test.csv"
out_df.to_csv(out_csv, index=False, encoding="utf-8-sig")
print(f"\n‚úÖ Done! Claims saved to {out_csv}")
print(f"Total claims extracted: {len(claims)}")
